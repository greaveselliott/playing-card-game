// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App container Should map dispatch methods to control props. 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Provider
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
>
    <div
        className="l-app"
    >
        <main
            className="l-app__main"
        >
            <Connect(CardCollection)
                heading="Deck"
            />
            <Connect(CardCollection)
                heading="Hand"
            />
            <Connect(Controls) />
        </main>
    </div>
</Provider>,
  "nodes": Array [
    <Provider
      store={
            Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(observable): [Function],
                }
      }
>
      <div
            className="l-app"
      >
            <main
                  className="l-app__main"
            >
                  <Connect(CardCollection)
                        heading="Deck"
                  />
                  <Connect(CardCollection)
                        heading="Hand"
                  />
                  <Connect(Controls) />
            </main>
      </div>
</Provider>,
  ],
  "options": Object {
    "context": Object {
      "store": Object {
        "dispatch": [Function],
        "getAction": [Function],
        "getActions": [Function],
        "getState": [Function],
        "isActionDispatched": [Function],
        "isActionTypeDispatched": [Function],
        "subscribe": [Function],
      },
    },
  },
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {
        "store": Object {
          "dispatch": [Function],
          "getAction": [Function],
          "getActions": [Function],
          "getState": [Function],
          "isActionDispatched": [Function],
          "isActionTypeDispatched": [Function],
          "subscribe": [Function],
        },
      },
      "_currentElement": <App />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": App {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Provider
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }
>
          <div
                    className="l-app"
          >
                    <main
                              className="l-app__main"
                    >
                              <Connect(CardCollection)
                                        heading="Deck"
                              />
                              <Connect(CardCollection)
                                        heading="Hand"
                              />
                              <Connect(Controls) />
                    </main>
          </div>
</Provider>,
        "_debugID": 2,
        "_renderedOutput": <Provider
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }
>
          <div
                    className="l-app"
          >
                    <main
                              className="l-app__main"
                    >
                              <Connect(CardCollection)
                                        heading="Deck"
                              />
                              <Connect(CardCollection)
                                        heading="Hand"
                              />
                              <Connect(Controls) />
                    </main>
          </div>
</Provider>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <App />,
}
`;
